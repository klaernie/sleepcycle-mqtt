#!/usr/bin/python3 -u

from zeroconf import ServiceBrowser, Zeroconf
import json
import paho.mqtt.client as mqtt
import time
import os

mqtt_server = os.environ.get('MQTT_SERVER')
mqtt_topic = os.environ.get('MQTT_TOPIC')

mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)
mqttc.will_set(f"{mqtt_topic}/bridgestate", payload="offline", qos=0, retain=True)

def i_am_alive():
    print("sending bridge state")
    mqttc.publish(f"{mqtt_topic}/bridgestate", "online")

def on_connect(client, userdata, flags, reason_code, properties):
    print("connected")
    i_am_alive()


mqttc.on_connect = on_connect

mqttc.connect(mqtt_server)
mqttc.loop_start()

SleepCycle_mDNS_Service = "_sleepcycle_ald._tcp.local."

def publish( devicename, state):
    name = devicename.replace(f".{SleepCycle_mDNS_Service}", "")
    topicname = name.replace(" ", "_")
    state_topic = f"{mqtt_topic}/{topicname}"

    disco_msg = json.dumps(
        {
            "name": name,
            "state_topic": state_topic,
            "availability_topic": f"{mqtt_topic}/bridgestate",
            "unique_id": topicname,
            "device": {
                "identifiers": "sleepcycle",
                "name": "sleepcycle-mqtt",
                "model": "sleepcycle-mqtt",
            }
        }
    );
    mqttc.publish("homeassistant/binary_sensor/sleepcycle/%s/config" % (topicname) , disco_msg, retain=True)

    print("publishing to %s: %s" % (state_topic, state))
    mqttc.publish(state_topic, state)

class MyListener:

    def add_service(self, zeroconf, type, name):
        print("Service %s added" % (name))
        publish(name,"ON")

    def update_service(self, zeroconf, type, name):
        pass

    def remove_service(self, zeroconf, type, name):
        print("Device %s removed" % (name,))
        publish(name,"OFF")



zeroconf = Zeroconf()
listener = MyListener()
browser = ServiceBrowser(zeroconf, SleepCycle_mDNS_Service, listener)

while True:
    time.sleep(100)
    i_am_alive()

zeroconf.close()
mqttc.loop_stop()
